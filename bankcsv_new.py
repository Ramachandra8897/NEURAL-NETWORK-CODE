# -*- coding: utf-8 -*-
"""BANKCSV NEW

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GjNTL5mW-FQMWpx8Xnx-A8Qr0CGJuOaJ
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import sys
import keras
import sklearn

b=pd.read_csv("/content/bank csv.csv")

b.head()

print(b.isnull().sum())
print(b.dropna)

print(b.shape)
print(b["loan"].value_counts())

b.value_counts()

b.describe()

b.dtypes

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
col=b.select_dtypes(include=["object"]).columns
for i in col:
  b[i]=le.fit_transform(b[i])
b.head()



sns.histplot(data=b)

b.hist()

plt.figure(figsize=(8, 8))
labels=["no","yes","reject"]
b['loan'].value_counts().plot.pie(labels=labels,autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Loan Status')
plt.ylabel('') # Remove the y-label
plt.show()

# prompt: build box plot

plt.figure(figsize=(8, 6))
sns.boxplot(x='loan', y='age', data=b)
plt.title('Box Plot of Age vs. Loan Status')
plt.xlabel('Loan Status')
plt.ylabel('Age')
plt.show()

sns.boxplot(x="age",y="loan",data=b)
plt.show()

y=b["loan"]
x=b.drop("loan",axis=1)

from sklearn.model_selection import train_test_split
x_test,x_train,y_test,y_train=train_test_split(x,y,test_size=0.3,random_state=42)

# convert the data to categorical labels
from tensorflow.keras.utils import to_categorical

Y_train = to_categorical(y_train, num_classes=None)
Y_test = to_categorical(y_test, num_classes=None)
print (Y_train.shape)
print (Y_train[:10])

from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
model = Sequential()
model.add(Dense(64,input_dim=x_train.shape[1],kernel_initializer="normal",activation='relu'))  # Input layer
model.add(Dense(32, activation='relu'))  # Hidden layer
model.add(Dense(1, activation='sigmoid')) # Output layer (sigmoid for binary classification)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
# adam=Adam(learning_rate==0.001)
# model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Loss: {loss:.4f}")
print(f"Test Accuracy: {accuracy:.4f}")

print(model.summary())



model.fit(x_train, y_train, epochs=30, batch_size=32, verbose=1)



y_train_binary=y_train.copy()
y_test_binary=y_test.copy()
y_train_binary[y_train_binary>0]=1
y_test_binary[y_test_binary>0]=1
print(y_train_binary[:20])

n_model = Sequential()
n_model.add(Dense(64,input_dim=x_train.shape[1],kernel_initializer="normal",activation='relu'))  # Input layer
n_model.add(Dense(32, kernel_initializer="normal",activation='relu'))  # Hidden layer
n_model.add(Dense(1, activation='softmax')) # Output layer (sigmoid for binary classification)

# Compile the model
n_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
# adam=Adam(learning_rate==0.001)
# model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])

# Train the model
# model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))



print(n_model.summary())

# Train the model
n_model.fit(x_train, y_train_binary, epochs=50, batch_size=32, verbose=1)



binary_pred = np.round(n_model.predict(x_test)).astype(int)

print('Results for Binary Model')
print(accuracy_score(y_test_binary, binary_pred))
print(classification_report(y_test_binary, binary_pred))

# prompt: from sklearn.metrics import classification_report, accuracy_score
# categorical_pred = np.argmax(model.predict(x_test), axis=1)
# print('Results for Categorical Model')
# print(accuracy_score(y_test, categorical_pred))
# print(classification_report(y_test, categorical_pred))
# give the same code inthe above data

from sklearn.metrics import classification_report, accuracy_score
categorical_pred = np.argmax(model.predict(x_test), axis=1)
print('Results for Categorical Model')
print(accuracy_score(y_test, categorical_pred))
print(classification_report(y_test, categorical_pred))

